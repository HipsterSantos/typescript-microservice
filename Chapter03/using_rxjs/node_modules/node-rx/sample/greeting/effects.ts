import { Observable } from 'rxjs'; 
import { Actions, Effect } from 'node-rx';
import { ClientActions } from './actions';
import * as Discord from 'discord.js';

export class ClientEffects {
    private client: Discord.Client = new Discord.Client();
    constructor(
        private actions$: Actions
    ) {
    }
    @Effect() login$ = this.actions$
    .ofType( ClientActions.CLIENT_LOGIN )
    .flatMap( action => {
        return Observable.fromPromise( this.client.login( action.payload ) );
    } )
    .map( token => {
        return ClientActions.loginSucceeded( token );
    } )
    .catch( ( err ) => { 
        return Observable.of( ClientActions.loginFailed() );
    } );

    @Effect() logout$ = this.actions$
    .ofType( ClientActions.CLIENT_LOGOUT )
    .flatMap( action => {
        return Observable.fromPromise( this.client.destroy() );
    } )
    .map( () => {
        this.client = new Discord.Client();
        return ClientActions.logoutSucceeded();
    } )
    .catch( ( err ) => { 
        return Observable.of( ClientActions.logoutFailed() );
    } );
}