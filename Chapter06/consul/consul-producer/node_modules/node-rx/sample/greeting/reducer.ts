import { Action, nextState } from 'node-rx';
import { ClientActions } from './actions';

export interface ClientState {
    isLoggedIn?: boolean;
    waitingForResponse?: boolean;
    loginFailed?: false;
    token?: string;
}

export const clientInitialState: ClientState = {
    token: '',
    waitingForResponse: false,
    isLoggedIn: false,
    loginFailed: false,
};

export function clientReducer( state = clientInitialState, action: Action): ClientState {
    switch ( action.type ) {
        case ClientActions.CLIENT_LOGIN: {
            console.log( '[client] reducer CLIENT_LOGIN: ' + action.payload );
            return nextState( state, {
                waitingForResponse: true
            } );
        }
        case ClientActions.CLIENT_LOGIN_SUCCEEDED: {
            console.log( '[client] reducer CLIENT_LOGIN_SUCCEEDED: ' );
            return nextState( state, {
                token: action.payload,
                isLoggedIn: true,
                waitingForResponse: false,
                loginFailed: false
            } );
        }
        case ClientActions.CLIENT_LOGIN_FAILED: {
            console.log( '[client] reducer CLIENT_LOGIN_FAILED: ' + action.payload );
            return nextState( state, {
                token: '',
                isLoggedIn: false,
                waitingForResponse: false,
                loginFailed: true
            } );
        }
        case ClientActions.CLIENT_LOGOUT: {
            console.log( '[client] reducer CLIENT_LOGOUT.' );
            return nextState( state, {
                waitingForResponse: true
            } );
        }
        case ClientActions.CLIENT_LOGOUT_SUCCEEDED: {
            console.log( '[client] reducer CLIENT_LOGOUT_SUCCEEDED.' );
            return nextState( state, {
                token: '',
                waitingForResponse: false,
                isLoggedIn: false,
            } );
        }
        case ClientActions.CLIENT_LOGOUT_FAILED: {
            console.log( '[client] reducer CLIENT_LOGOUT_FAILED.' );
            return nextState( state, {
                waitingForResponse: true
            } );
        }
        default: {
            return state;
        }
    }
}

